"""
Finance interface for Teo bot
Provides user interface for Google Sheets financial data analysis
"""
import logging
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from src.services.finance_service import finance_service
from src.database.database import DatabaseManager

logger = logging.getLogger(__name__)
db = DatabaseManager()


class FinanceInterface:
    """Handles finance-related bot interactions"""
    
    @staticmethod
    def create_navigation_keyboard(back_callback: str, include_main_menu: bool = True) -> InlineKeyboardMarkup:
        """Create standard navigation keyboard with back and main menu buttons"""
        keyboard = []
        
        # Add back button
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)])
        
        # Add main menu button if requested
        if include_main_menu:
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def _edit_message_safely(query, text, reply_markup=None):
        """Safely edit message, handling both text and photo messages"""
        if query.message.photo:
            await query.edit_message_caption(
                caption=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    @staticmethod
    def create_finance_menu() -> InlineKeyboardMarkup:
        """Create main finance menu"""
        keyboard = [
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü", callback_data='finance_month')],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='finance_week')],
            [InlineKeyboardButton("üìÖ –ê–Ω–∞–ª–∏–∑ –∑–∞ –¥–µ–Ω—å", callback_data='finance_day')],
            [InlineKeyboardButton("üí∞ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑", callback_data='finance_all')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã", callback_data='finance_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_settings_menu() -> InlineKeyboardMarkup:
        """Create finance settings menu"""
        keyboard = [
            [InlineKeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_set_url')],
            [InlineKeyboardButton("üîó –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É", callback_data='finance_show_url')],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_clear_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_period_menu() -> InlineKeyboardMarkup:
        """Create period selection menu"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data='finance_period_day')],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data='finance_period_week')],
            [InlineKeyboardButton("üìà –ú–µ—Å—è—Ü", callback_data='finance_period_month')],
            [InlineKeyboardButton("üìä –ì–æ–¥", callback_data='finance_period_year')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def handle_finance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle finance menu selection"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Check if user has configured Google Sheets
        finance_settings = db.get_finance_settings(user_id)
        if not finance_settings:
            await FinanceInterface._edit_message_safely(
                query,
                "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑*\n\n"
                "–ó–¥–µ—Å—å –º—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã: –¥–∏–Ω–∞–º–∏–∫–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±—é–¥–∂–µ—Ç—ã, –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.\n\n"
                "üìã *–ü–æ–¥–∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—É –≤ 2 —à–∞–≥–∞:*\n"
                "1. –î–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É\n"
                "2. –í—ã–±–µ—Ä–∏ –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
                "üéØ *–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:*\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥—ã\n"
                "‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
                    [InlineKeyboardButton("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É", callback_data='finance_format_requirements')],
                    [InlineKeyboardButton("üéÆ –î–µ–º–æ-—Ä–µ–∂–∏–º", callback_data='finance_demo')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
                ])
            )
            return 'finance_menu'
        
        # Show financial dashboard for connected users
        await FinanceInterface._show_financial_dashboard(update, context)
        return 'finance_menu'
    
    @staticmethod
    async def _show_financial_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show financial dashboard with current month summary"""
        query = update.callback_query
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Show loading message
        await FinanceInterface._edit_message_safely(
            query,
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...",
            reply_markup=FinanceInterface.create_navigation_keyboard('main_menu', include_main_menu=False)
        )
        
        try:
            # Get current month analysis
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            current_month_analysis = finance_service.analyze_finances(parsed_data, 'month')
            
            # Get week trend
            week_analysis = finance_service.analyze_finances(parsed_data, 'week')
            previous_week_analysis = finance_service.get_previous_period_analysis(parsed_data, 'week')
            
            # Calculate week trend percentage
            week_trend = 0
            if previous_week_analysis['total_expenses'] > 0:
                week_trend = ((week_analysis['total_expenses'] - previous_week_analysis['total_expenses']) / 
                             previous_week_analysis['total_expenses']) * 100
            
            # Format dashboard message
            message = "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç*\n\n"
            
            # Monthly summary
            message += f"üìä *–ò—Ç–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü:*\n"
            message += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {current_month_analysis['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {current_month_analysis['total_income']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {current_month_analysis['balance']:,.0f} ‚ÇΩ\n\n"
            
            # Top expense categories
            if current_month_analysis['expense_categories']:
                message += "üìâ *–¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
                for i, (category, amount) in enumerate(list(current_month_analysis['expense_categories'].items())[:3], 1):
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
                message += "\n"
            
            # Week trend
            trend_icon = "‚Üì" if week_trend < 0 else "‚Üë"
            message += f"üìà *–¢—Ä–µ–Ω–¥ –Ω–µ–¥–µ–ª–∏:* —Ä–∞—Å—Ö–æ–¥—ã {trend_icon} {abs(week_trend):.1f}% vs –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è\n\n"
            
            # Quick insights
            message += "üí° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            message += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü' –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n"
            message += "‚Ä¢ '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' –ø–æ–∫–∞–∂–µ—Ç –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏\n"
            message += "‚Ä¢ '–¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑' –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            # Dashboard keyboard
            keyboard = [
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data='finance_monthly_analytics')],
                [InlineKeyboardButton("üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='finance_categories')],
                [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑", callback_data='finance_trends')],
                [InlineKeyboardButton("üí∞ –ë—é–¥–∂–µ—Ç—ã –∏ –ª–∏–º–∏—Ç—ã", callback_data='finance_budgets')],
                [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º", callback_data='finance_search')],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='finance_refresh')],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error showing financial dashboard for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='finance_refresh')],
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ])
            )
    
    @staticmethod
    async def handle_finance_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle finance settings menu"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        if finance_settings:
            status_text = "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else:
            status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        await FinanceInterface._edit_message_safely(
            query,
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=FinanceInterface.create_settings_menu()
        )
        return 'finance_settings'
    
    @staticmethod
    async def handle_set_sheet_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle setting Google Sheets URL"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Set user state to wait for URL
        context.user_data['waiting_for'] = 'waiting_for_finance_sheet_url'
        
        # Check if the current message has media and handle accordingly
        if query.message.photo:
            await query.edit_message_caption(
                caption="üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É.\n\n"
                "üìã *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞' (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'\n"
                "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                "üìä *–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:*\n"
                "‚Ä¢ –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
                "‚Ä¢ –°—É–º–º–∞ (—á–∏—Å–ª–æ)\n"
                "‚Ä¢ –¢–∏–ø (–î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥)\n"
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_settings')]
                ]),
                parse_mode='Markdown'
            )
        else:
            await FinanceInterface._edit_message_safely(
                query,
                "üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É.\n\n"
                "üìã *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞' (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'\n"
                "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                "üìä *–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:*\n"
                "‚Ä¢ –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
                "‚Ä¢ –°—É–º–º–∞ (—á–∏—Å–ª–æ)\n"
                "‚Ä¢ –¢–∏–ø (–î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥)\n"
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_settings')]
                ])
            )
        return 'waiting_for_url'
    
    @staticmethod
    async def handle_connect_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle table connection initiation"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Set user state to wait for URL
        context.user_data['waiting_for'] = 'waiting_for_finance_sheet_url'
        
        await FinanceInterface._edit_message_safely(
            query,
            "üîó *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É.\n\n"
            "üìã *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:*\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞' (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_menu')]
            ])
        )
        return 'waiting_for_url'
    
    @staticmethod
    async def handle_format_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle format requirements display"""
        query = update.callback_query
        await query.answer()
        
        await FinanceInterface._edit_message_safely(
            query,
            "üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞–±–ª–∏—Ü—ã*\n\n"
            "–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n\n"
            "üìÖ **–î–∞—Ç–∞** - –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "üí∞ **–°—É–º–º–∞** - —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "üìä **–¢–∏–ø** - –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ –∏–ª–∏ +/-\n"
            "üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è** - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
            "üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π** - –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
            "üìù *–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:*\n"
            "`25.08.2025 | 1000 | –î–æ—Ö–æ–¥ | –ó–∞—Ä–ø–ª–∞—Ç–∞ | –ê–≤–∞–Ω—Å`\n"
            "`25.08.2025 | -500 | –†–∞—Å—Ö–æ–¥ | –ü—Ä–æ–¥—É–∫—Ç—ã | –ü—è—Ç—ë—Ä–æ—á–∫–∞`\n\n"
            "‚úÖ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
            "‚Ä¢ –¢–∏–ø: –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥, Income/Expense, +/-, 1/-1\n"
            "‚Ä¢ –î–∞—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì, –ì–ì–ì–ì-–ú–ú-–î–î, –î–î/–ú–ú/–ì–ì–ì–ì",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞", callback_data='finance_show_template')],
                [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ])
        )
        return 'format_requirements'
    
    @staticmethod
    async def handle_show_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle template example display"""
        query = update.callback_query
        await query.answer()
        
        await FinanceInterface._edit_message_safely(
            query,
            "üìÑ *–ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã*\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:\n\n"
            "| –î–∞—Ç–∞ | –°—É–º–º–∞ | –¢–∏–ø | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π |\n"
            "|------|-------|-----|-----------|-------------|\n"
            "| 25.08.2025 | 50000 | –î–æ—Ö–æ–¥ | –ó–∞—Ä–ø–ª–∞—Ç–∞ | –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ |\n"
            "| 25.08.2025 | -1500 | –†–∞—Å—Ö–æ–¥ | –ü—Ä–æ–¥—É–∫—Ç—ã | –ü—è—Ç—ë—Ä–æ—á–∫–∞ |\n"
            "| 25.08.2025 | -300 | –†–∞—Å—Ö–æ–¥ | –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç | –¢–∞–∫—Å–∏ |\n"
            "| 26.08.2025 | 10000 | –î–æ—Ö–æ–¥ | –§—Ä–∏–ª–∞–Ω—Å | –ü—Ä–æ–µ–∫—Ç |\n"
            "| 26.08.2025 | -800 | –†–∞—Å—Ö–æ–¥ | –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è | –ö–∏–Ω–æ |\n\n"
            "üí° *–°–æ–≤–µ—Ç—ã:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ –ò–ª–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–∏–ø '–†–∞—Å—Ö–æ–¥'/'–î–æ—Ö–æ–¥'\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å (–ü—Ä–æ–¥—É–∫—Ç—ã, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è)\n"
            "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_format_requirements')]
            ])
        )
        return 'show_template'
    
    @staticmethod
    async def handle_demo_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle demo mode activation"""
        query = update.callback_query
        await query.answer()
        
        await FinanceInterface._edit_message_safely(
            query,
            "üéÆ *–î–µ–º–æ-—Ä–µ–∂–∏–º*\n\n"
            "–í–∫–ª—é—á–∞—é –¥–µ–º–æ: 3 –º–µ—Å—è—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π, 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞.\n\n"
            "üìä *–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:*\n"
            "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ 8 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞\n"
            "‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—É–º–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n"
            "‚úÖ *–≠—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.*",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", callback_data='finance_demo_analysis')],
                [InlineKeyboardButton("üîó –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ])
        )
        return 'demo_mode'
    
    @staticmethod
    async def handle_demo_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle demo analysis display"""
        query = update.callback_query
        await query.answer()
        
        # Generate demo data analysis
        demo_analysis = finance_service.generate_demo_analysis()
        
        message = "üìä *–î–µ–º–æ-–∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞*\n\n"
        message += f"üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {demo_analysis['total_income']:,.0f} ‚ÇΩ\n"
        message += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {demo_analysis['total_expenses']:,.0f} ‚ÇΩ\n"
        message += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {demo_analysis['balance']:,.0f} ‚ÇΩ\n"
        message += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {demo_analysis['transactions_count']}\n\n"
        
        if demo_analysis['expense_categories']:
            message += "üìâ *–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for i, (category, amount) in enumerate(list(demo_analysis['expense_categories'].items())[:5], 1):
                message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
            message += "\n"
        
        if demo_analysis['income_categories']:
            message += "üìà *–¢–æ–ø –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for i, (category, amount) in enumerate(list(demo_analysis['income_categories'].items())[:3], 1):
                message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
            message += "\n"
        
        message += "üéØ *–ò–Ω—Å–∞–π—Ç—ã:*\n"
        message += "‚Ä¢ –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: –ü—Ä–æ–¥—É–∫—Ç—ã –∏ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
        message += "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Ö–æ–¥: –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
        message += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n\n"
        message += "üí° *–≠—Ç–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!*"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data='finance_demo_detailed')],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_demo')]
        ]
        
        await FinanceInterface._edit_message_safely(
            query,
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return 'demo_analysis'
    
    @staticmethod
    async def handle_demo_detailed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle detailed demo analysis"""
        query = update.callback_query
        await query.answer()
        
        demo_analysis = finance_service.generate_demo_analysis()
        
        message = "üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑*\n\n"
        
        if demo_analysis['expense_categories']:
            message += "üìâ *–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for category, amount in demo_analysis['expense_categories'].items():
                percentage = (amount / demo_analysis['total_expenses'] * 100) if demo_analysis['total_expenses'] > 0 else 0
                message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            message += "\n"
        
        if demo_analysis['income_categories']:
            message += "üìà *–í—Å–µ –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
            for category, amount in demo_analysis['income_categories'].items():
                percentage = (amount / demo_analysis['total_income'] * 100) if demo_analysis['total_income'] > 0 else 0
                message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            message += "\n"
        
        message += "üìà *–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º:*\n"
        message += "‚Ä¢ –ù–µ–¥–µ–ª—è 1: +15,000 ‚ÇΩ\n"
        message += "‚Ä¢ –ù–µ–¥–µ–ª—è 2: +8,500 ‚ÇΩ\n"
        message += "‚Ä¢ –ù–µ–¥–µ–ª—è 3: +12,300 ‚ÇΩ\n"
        message += "‚Ä¢ –ù–µ–¥–µ–ª—è 4: +9,200 ‚ÇΩ\n\n"
        
        message += "üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        message += "‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ 20%\n"
        message += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        message += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –æ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–∞\n\n"
        message += "üí° *–≠—Ç–æ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!*"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data='finance_demo_analysis')],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='finance_menu')]
        ]
        
        await FinanceInterface._edit_message_safely(
            query,
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return 'demo_detailed'
    
    @staticmethod
    async def handle_sheet_url_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle user input of Google Sheets URL"""
        user_id = update.message.from_user.id
        url = update.message.text.strip()
        
        # Show processing message
        processing_msg = await update.message.reply_text(
            "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_menu')]
            ])
        )
        
        # Extract sheet ID
        sheet_id = finance_service.extract_sheet_id_from_url(url)
        if not sheet_id:
            await processing_msg.edit_text(
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏*\n\n"
                "üîç *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n"
                "‚Ä¢ –°—Å—ã–ª–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞\n"
                "‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                "üìã *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:*\n"
                "`https://docs.google.com/spreadsheets/d/SHEET_ID/edit`\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_connect')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'waiting_for_url'
        
        # Get available sheets
        await processing_msg.edit_text("üîó –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ...")
        sheets = finance_service.get_available_sheets(sheet_id)
        if not sheets:
            await processing_msg.edit_text(
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ*\n\n"
                "üîç *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                "‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞\n"
                "‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n\n"
                "üìã *–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞' (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'\n"
                "4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                "5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_connect')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'waiting_for_url'
        
        # Store sheet info in context for sheet selection
        context.user_data['temp_sheet_id'] = sheet_id
        context.user_data['temp_sheet_url'] = url
        context.user_data['available_sheets'] = sheets
        
        # Create sheet selection keyboard
        keyboard = []
        for sheet_name in sheets:
            keyboard.append([InlineKeyboardButton(f"üìÑ {sheet_name}", callback_data=f'finance_select_sheet_{sheet_name}')])
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='finance_connect')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
        ])
        
        await processing_msg.edit_text(
            "‚úÖ *–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
            f"üìä *–ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤:* {len(sheets)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç, –≥–¥–µ –ª–µ–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # Clear waiting state
        context.user_data.pop('waiting_for', None)
        return 'selecting_sheet'
    
    @staticmethod
    async def handle_sheet_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, sheet_name: str) -> str:
        """Handle sheet selection and validation"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_id = context.user_data.get('temp_sheet_id')
        sheet_url = context.user_data.get('temp_sheet_url')
        
        if not sheet_id:
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='finance_connect')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'finance_menu'
        
        # Show validation message
        await FinanceInterface._edit_message_safely(
            query,
            f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–æ–ª–±—Ü—ã –≤ –ª–∏—Å—Ç–µ '{sheet_name}'...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_connect')]
            ])
        )
        
        try:
            # Get and validate sheet data
            raw_data = finance_service.get_sheet_data(sheet_id, sheet_name)
            if not raw_data:
                await FinanceInterface._edit_message_safely(
                    query,
                    f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'*\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç", callback_data='finance_connect')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                    ])
                )
                return 'selecting_sheet'
            
            # Parse and validate data
            parsed_data = finance_service.parse_financial_data(raw_data)
            validation_result = finance_service.validate_financial_data(raw_data)
            
            if validation_result['is_valid']:
                # Success - save settings and show success message
                success = db.update_finance_settings(user_id, sheet_url, sheet_name)
                if success:
                    await FinanceInterface._edit_message_safely(
                        query,
                        f"‚úÖ *–õ–∏—Å—Ç '{sheet_name}' –ø–æ–¥–∫–ª—é—á–µ–Ω!*\n\n"
                        f"üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤:*\n"
                        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {', '.join(validation_result['found_columns'])}\n"
                        f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {len(parsed_data)}\n"
                        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {min([r['date'] for r in parsed_data if r.get('date')])} - {max([r['date'] for r in parsed_data if r.get('date')])}\n\n"
                        f"üéâ *–ì–æ—Ç–æ–≤–æ –∫ –∞–Ω–∞–ª–∏–∑—É!*",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data='finance_menu')],
                            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—Å—Ç", callback_data='finance_connect')],
                            [InlineKeyboardButton("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É", callback_data='finance_format_requirements')]
                        ])
                    )
                    # Clear temporary data
                    context.user_data.pop('temp_sheet_id', None)
                    context.user_data.pop('temp_sheet_url', None)
                    context.user_data.pop('available_sheets', None)
                    return 'finance_menu'
                else:
                    await FinanceInterface._edit_message_safely(
                        query,
                        "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_connect')],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                        ])
                    )
                    return 'selecting_sheet'
            else:
                # Validation failed - show error
                missing_columns = validation_result.get('missing_columns', [])
                found_columns = validation_result.get('found_columns', [])
                
                error_message = f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ*\n\n"
                error_message += f"üîç *–ü—Ä–æ–±–ª–µ–º–∞:* –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã\n\n"
                
                if found_columns:
                    error_message += f"‚úÖ *–ù–∞–π–¥–µ–Ω–æ:* {', '.join(found_columns)}\n\n"
                
                if missing_columns:
                    error_message += f"‚ùå *–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:* {', '.join(missing_columns)}\n\n"
                
                error_message += "üìã *–¢—Ä–µ–±—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã:*\n"
                error_message += "‚Ä¢ **–î–∞—Ç–∞** (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)\n"
                error_message += "‚Ä¢ **–°—É–º–º–∞** (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)\n"
                error_message += "‚Ä¢ **–¢–∏–ø** (–î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥)\n"
                error_message += "‚Ä¢ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è** (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n\n"
                error_message += "üìù *–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:*\n"
                error_message += "`2025-08-25 | -1200 | –†–∞—Å—Ö–æ–¥ | –ü—Ä–æ–¥—É–∫—Ç—ã | –ü—è—Ç—ë—Ä–æ—á–∫–∞`"
                
                await FinanceInterface._edit_message_safely(
                    query,
                    error_message,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞", callback_data='finance_show_template')],
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'finance_select_sheet_{sheet_name}')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_connect')]
                    ])
                )
                return 'selecting_sheet'
                
        except Exception as e:
            logger.error(f"Error validating sheet {sheet_name} for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_connect')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'selecting_sheet'
    
    @staticmethod
    async def handle_show_sheet_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle showing current sheet URL"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Check if the current message has media and handle accordingly
        if query.message.photo:
            if finance_settings:
                await query.edit_message_caption(
                    caption=f"üîó *–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞*\n\n"
                    f"`{finance_settings['url']}`\n"
                    f"üìÑ –õ–∏—Å—Ç: `{finance_settings['sheet_name']}`\n\n"
                    f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É'",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='finance_connect')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_caption(
                    caption="‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data='finance_connect')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ])
                )
        else:
            if finance_settings:
                await FinanceInterface._edit_message_safely(query, 
                    f"üîó *–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞*\n\n"
                    f"`{finance_settings['url']}`\n"
                    f"üìÑ –õ–∏—Å—Ç: `{finance_settings['sheet_name']}`\n\n"
                    f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É'",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='finance_connect')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await FinanceInterface._edit_message_safely(query, 
                    "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data='finance_connect')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ])
                )
        
        return 'finance_settings'
    
    @staticmethod
    async def handle_clear_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle clearing finance settings"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        success = db.update_finance_settings(user_id, None)
        
        if success:
            await FinanceInterface._edit_message_safely(query, 
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='finance_set_url')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        else:
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                ])
            )
        
        return 'finance_settings'
    
    @staticmethod
    async def handle_finance_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str) -> str:
        """Handle finance analysis for specific period"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        if not finance_settings:
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'finance_menu'
        
        # Show loading message
        await FinanceInterface._edit_message_safely(query, 
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ])
        )
        
        try:
            # Get data from sheet
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            
            if not raw_data:
                await FinanceInterface._edit_message_safely(query, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                    ])
                )
                return 'finance_menu'
            
            # Parse and analyze data
            parsed_data = finance_service.parse_financial_data(raw_data)
            analysis = finance_service.analyze_finances(parsed_data, period)
            
            # Format response
            period_names = {
                'day': '–¥–µ–Ω—å',
                'week': '–Ω–µ–¥–µ–ª—é', 
                'month': '–º–µ—Å—è—Ü',
                'year': '–≥–æ–¥',
                'all': '–≤—Å–µ –≤—Ä–µ–º—è'
            }
            
            period_name = period_names.get(period, period)
            
            message = f"üí∞ *–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_name}*\n\n"
            message += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            message += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {analysis['total_income']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {analysis['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {analysis['balance']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {analysis['transactions_count']}\n\n"
            
            if analysis['expense_categories']:
                message += "üìâ *–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for i, (category, amount) in enumerate(list(analysis['expense_categories'].items())[:5], 1):
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
                message += "\n"
            
            if analysis['income_categories']:
                message += "üìà *–¢–æ–ø –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for i, (category, amount) in enumerate(list(analysis['income_categories'].items())[:5], 1):
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
            
            keyboard = [
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f'finance_detailed_{period}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(query, 
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error analyzing finances for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'finance_menu'
    
    @staticmethod
    async def handle_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str) -> str:
        """Handle detailed finance analysis"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_url = db.get_finance_settings(user_id)
        
        try:
            sheet_id = finance_service.extract_sheet_id_from_url(sheet_url)
            raw_data = finance_service.get_sheet_data(sheet_id)
            parsed_data = finance_service.parse_financial_data(raw_data)
            analysis = finance_service.analyze_finances(parsed_data, period)
            
            period_names = {
                'day': '–¥–µ–Ω—å',
                'week': '–Ω–µ–¥–µ–ª—é', 
                'month': '–º–µ—Å—è—Ü',
                'year': '–≥–æ–¥',
                'all': '–≤—Å–µ –≤—Ä–µ–º—è'
            }
            
            period_name = period_names.get(period, period)
            
            message = f"üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ {period_name}*\n\n"
            
            if analysis['expense_categories']:
                message += "üìâ *–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, amount in analysis['expense_categories'].items():
                    percentage = (amount / analysis['total_expenses'] * 100) if analysis['total_expenses'] > 0 else 0
                    message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
                message += "\n"
            
            if analysis['income_categories']:
                message += "üìà *–í—Å–µ –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, amount in analysis['income_categories'].items():
                    percentage = (amount / analysis['total_income'] * 100) if analysis['total_income'] > 0 else 0
                    message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f'finance_{period}')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='finance_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(query, 
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in detailed analysis for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'finance_menu'

    @staticmethod
    async def handle_monthly_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle monthly analytics display"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Show loading message
        await FinanceInterface._edit_message_safely(
            query,
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü...",
            reply_markup=FinanceInterface.create_navigation_keyboard('finance_menu')
        )
        
        try:
            # Get data and analysis
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            month_analysis = finance_service.analyze_finances(parsed_data, 'month')
            unusual_expenses = finance_service.get_unusual_expenses(parsed_data, 'month')
            
            # Get current month name
            current_month = datetime.now().strftime('%B')
            
            # Calculate average daily expenses
            avg_daily_expenses = month_analysis['total_expenses'] / 30 if month_analysis['total_expenses'] > 0 else 0
            
            # Format message
            message = f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {current_month}*\n\n"
            
            # Monthly summary
            message += f"üí∞ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            message += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {month_analysis['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {month_analysis['total_income']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {avg_daily_expenses:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {month_analysis['transactions_count']}\n\n"
            
            # Unusual expenses
            if unusual_expenses:
                message += "‚ö†Ô∏è *–ù–µ—Ç–∏–ø–∏—á–Ω—ã–µ –¥–Ω–∏:*\n"
                for i, unusual in enumerate(unusual_expenses[:3], 1):
                    date_str = unusual['date'].strftime('%d %b')
                    category = unusual['largest_transaction'].get('main_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    message += f"{i}. {date_str} ({unusual['total_amount']:,.0f} ‚ÇΩ ‚Äî {category})\n"
                message += "\n"
            
            # Top categories
            if month_analysis['expense_categories']:
                message += "üìâ *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
                for i, (category, amount) in enumerate(list(month_analysis['expense_categories'].items())[:5], 1):
                    percentage = (amount / month_analysis['total_expenses'] * 100) if month_analysis['total_expenses'] > 0 else 0
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            
            # Keyboard
            keyboard = [
                [InlineKeyboardButton("üìÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data='finance_previous_month')],
                [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—à–ª—ã–º –≥–æ–¥–æ–º", callback_data='finance_year_comparison')],
                [InlineKeyboardButton("‚ö†Ô∏è –ù–µ—Ç–∏–ø–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã", callback_data='finance_unusual_expenses')],
                [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞", callback_data='finance_export_report')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error in monthly analytics for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ])
            )
        
        return 'monthly_analytics'
    
    @staticmethod
    async def handle_categories_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle categories analysis display"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Show loading message
        await FinanceInterface._edit_message_safely(
            query,
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...",
            reply_markup=FinanceInterface.create_navigation_keyboard('finance_menu')
        )
        
        try:
            # Get data and analysis
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            month_analysis = finance_service.analyze_finances(parsed_data, 'month')
            growth_analysis = finance_service.get_category_growth_analysis(parsed_data, 3)
            
            # Format message
            message = "üìã *–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n"
            
            # Top categories
            if month_analysis['expense_categories']:
                message += "üèÜ *–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n\n"
                for i, (category, amount) in enumerate(list(month_analysis['expense_categories'].items())[:5], 1):
                    percentage = (amount / month_analysis['total_expenses'] * 100) if month_analysis['total_expenses'] > 0 else 0
                    message += f"{i}. **{category}** ‚Äî {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
                message += "\n"
            
            # Growth leaders
            if growth_analysis['fastest_growing']:
                message += "üìà *–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ (3 –º–µ—Å—è—Ü–∞):*\n"
                for growth in growth_analysis['fastest_growing'][:3]:
                    message += f"‚Ä¢ {growth['category']}: +{growth['growth_rate']:.1f}%\n"
                message += "\n"
            
            # Declining categories
            if growth_analysis['declining']:
                message += "üìâ *–°–Ω–∏–∂–∞—é—â–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n"
                for decline in growth_analysis['declining'][:3]:
                    message += f"‚Ä¢ {decline['category']}: {decline['growth_rate']:.1f}%\n"
                message += "\n"
            
            message += "üí° *–°–æ–≤–µ—Ç—ã:*\n"
            message += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏\n"
            message += "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–æ—à–ª—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏"
            
            # Create keyboard with top categories
            keyboard = []
            if month_analysis['expense_categories']:
                for category in list(month_analysis['expense_categories'].keys())[:3]:
                    keyboard.append([InlineKeyboardButton(f"üìä {category}", callback_data=f'finance_category_detail_{category}')])
            
            keyboard.extend([
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å/–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='finance_edit_categories')],
                [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å 3 –º–µ—Å—è—Ü–∞", callback_data='finance_compare_months')],
                [InlineKeyboardButton("üìà –õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞", callback_data='finance_growth_leaders')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
            
            await FinanceInterface._edit_message_safely(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error in categories analysis for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'categories_analysis'
    
    @staticmethod
    async def handle_trends_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle trends and forecast analysis"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Show loading message
        await FinanceInterface._edit_message_safely(
            query,
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã...",
            reply_markup=FinanceInterface.create_navigation_keyboard('finance_menu')
        )
        
        try:
            # Get data and analysis
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            
            # Get various analyses
            week_analysis = finance_service.analyze_finances(parsed_data, 'week')
            previous_week = finance_service.get_previous_period_analysis(parsed_data, 'week')
            forecast = finance_service.get_expense_forecast(parsed_data, 30)
            
            # Calculate week trend
            week_trend = 0
            if previous_week['total_expenses'] > 0:
                week_trend = ((week_analysis['total_expenses'] - previous_week['total_expenses']) / 
                             previous_week['total_expenses']) * 100
            
            # Format message
            message = "üìà *–¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã*\n\n"
            
            # Weekly trend
            trend_icon = "‚Üì" if week_trend < 0 else "‚Üë"
            message += f"üìä *–î–∏–Ω–∞–º–∏–∫–∞ 12 –Ω–µ–¥–µ–ª—å:*\n"
            message += f"‚Ä¢ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_analysis['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: {previous_week['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend_icon} {abs(week_trend):.1f}%\n\n"
            
            # Forecast
            message += f"üîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ—Å—è—Ü–∞:*\n"
            message += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {forecast['forecast_amount']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: ¬±{forecast['confidence_interval']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {forecast['trend']}\n\n"
            
            # Factors
            if forecast['factors']:
                message += "üìã *–£—á—Ç—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:*\n"
                for factor in forecast['factors']:
                    message += f"‚Ä¢ {factor}\n"
                message += "\n"
            
            # Recommendations
            message += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            if week_trend > 10:
                message += "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å—Ç—É—Ç - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é\n"
            elif week_trend < -10:
                message += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n"
            else:
                message += "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã - –º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç\n"
            
            # Keyboard
            keyboard = [
                [InlineKeyboardButton("üîç –§–∞–∫—Ç–æ—Ä—ã –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞", callback_data='finance_overspending_factors')],
                [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", callback_data='finance_savings_tips')],
                [InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data='finance_set_goal')],
                [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º", callback_data='finance_month_comparison')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error in trends analysis for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'trends_analysis'
    
    @staticmethod
    async def handle_budgets_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle budgets and limits management"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Get user budgets from database
        user_budgets = db.get_user_budgets(user_id)
        
        if not user_budgets:
            message = "üí∞ *–ë—é–¥–∂–µ—Ç—ã –∏ –ª–∏–º–∏—Ç—ã*\n\n"
            message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.\n\n"
            message += "üí° *–ß—Ç–æ –¥–∞—é—Ç –±—é–¥–∂–µ—Ç—ã:*\n"
            message += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            message += "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É\n"
            message += "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞\n"
            message += "‚Ä¢ –ü–æ–º–æ—â—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data='finance_add_budget')],
                [InlineKeyboardButton("üìã –ü—Ä–∏–º–µ—Ä—ã –±—é–¥–∂–µ—Ç–æ–≤", callback_data='finance_budget_examples')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
        else:
            # Show current budgets with progress
            message = "üí∞ *–í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:*\n\n"
            
            for budget in user_budgets:
                progress_percentage = (budget['spent'] / budget['limit'] * 100) if budget['limit'] > 0 else 0
                progress_bar = "‚ñà" * min(int(progress_percentage / 10), 10) + "‚ñë" * (10 - min(int(progress_percentage / 10), 10))
                
                message += f"üìä **{budget['category']}**\n"
                message += f"–õ–∏–º–∏—Ç: {budget['limit']:,.0f} ‚ÇΩ\n"
                message += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {budget['spent']:,.0f} ‚ÇΩ ({progress_percentage:.1f}%)\n"
                message += f"–û—Å—Ç–∞–ª–æ—Å—å: {budget['limit'] - budget['spent']:,.0f} ‚ÇΩ\n"
                message += f"[{progress_bar}]\n"
                
                if progress_percentage > 90:
                    message += "‚ö†Ô∏è *–ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É!*\n"
                elif progress_percentage > 80:
                    message += "‚ö° *–í–Ω–∏–º–∞–Ω–∏–µ!*\n"
                
                message += "\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data='finance_add_budget')],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data='finance_edit_budget')],
                [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–µ", callback_data='finance_overspending_alerts')],
                [InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ", callback_data='finance_reset_budgets')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
        
        await FinanceInterface._edit_message_safely(
            query,
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return 'budgets_management'
    
    @staticmethod
    async def handle_search_operations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle search operations interface"""
        query = update.callback_query
        await query.answer()
        
        message = "üîç *–ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º*\n\n"
        message += "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º:\n\n"
        message += "üìù *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        message += "‚Ä¢ \"–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ—Ñ–µ –∑–∞ –∏—é–ª—å\"\n"
        message += "‚Ä¢ \"–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?\"\n"
        message += "‚Ä¢ \"–°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è —Ç—Ä–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\"\n"
        message += "‚Ä¢ \"–°–≤–æ–¥–∫–∞ –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ\"\n"
        message += "‚Ä¢ \"–¢—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –∞–≤–≥—É—Å—Ç–µ\"\n\n"
        message += "üí° *–°–æ–≤–µ—Ç—ã:*\n"
        message += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        message += "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–µ—Ä–∏–æ–¥—ã (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü)\n"
        message += "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º –æ–ø–µ—Ä–∞—Ü–∏–π"
        
        # Set user state to wait for search query
        context.user_data['waiting_for'] = 'waiting_for_finance_search'
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data='finance_popular_queries')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        
        await FinanceInterface._edit_message_safely(
            query,
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return 'search_operations'
    
    @staticmethod
    async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query_text: str) -> str:
        """Handle search query from user"""
        user_id = update.message.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        if not finance_settings:
            await update.message.reply_text(
                "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Google Sheets –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_connect')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'search_operations'
        
        # Show processing message
        processing_msg = await update.message.reply_text(
            "üîç –ò—â—É –æ–ø–µ—Ä–∞—Ü–∏–∏...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_search')]
            ])
        )
        
        try:
            # Get data
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            
            # Process search query
            search_results = finance_service.search_operations(parsed_data, query_text)
            
            if not search_results['operations']:
                await processing_msg.edit_text(
                    f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{query_text}\"*\n\n"
                    f"‚ùå –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    f"üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                    f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                    f"‚Ä¢ –£–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª—è)\n"
                    f"‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data='finance_search')],
                        [InlineKeyboardButton("üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data='finance_popular_queries')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                    ])
                )
                return 'search_operations'
            
            # Format results
            message = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{query_text}\"*\n\n"
            
            # Summary
            total_amount = sum(op['amount'] for op in search_results['operations'])
            message += f"üìä *–ù–∞–π–¥–µ–Ω–æ:* {len(search_results['operations'])} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            message += f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_amount:,.0f} ‚ÇΩ\n"
            message += f"üìÖ *–ü–µ—Ä–∏–æ–¥:* {search_results['period']}\n\n"
            
            # Top operations
            if search_results['operations']:
                message += "üèÜ *–ö—Ä—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
                for i, op in enumerate(search_results['operations'][:5], 1):
                    date_str = op['date'].strftime('%d %b')
                    category = op.get('main_category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    message += f"{i}. {date_str}: {op['amount']:,.0f} ‚ÇΩ ({category})\n"
                message += "\n"
            
            # Categories breakdown
            if search_results['categories']:
                message += "üìã *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, amount in list(search_results['categories'].items())[:5]:
                    percentage = (amount / total_amount * 100) if total_amount > 0 else 0
                    message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            
            # Clear waiting state
            context.user_data.pop('waiting_for', None)
            
            # Keyboard
            keyboard = [
                [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç .CSV", callback_data='finance_export_search')],
                [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data='finance_show_all_operations')],
                [InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data='finance_add_limit_from_search')],
                [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data='finance_search')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await processing_msg.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error processing search query for user {user_id}: {e}")
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_search')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'search_operations'
    
    @staticmethod
    async def handle_refresh_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle data refresh"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        finance_settings = db.get_finance_settings(user_id)
        
        # Show refreshing message
        await FinanceInterface._edit_message_safely(
            query,
            "üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...",
            reply_markup=FinanceInterface.create_navigation_keyboard('finance_menu')
        )
        
        try:
            # Get fresh data
            sheet_id = finance_service.extract_sheet_id_from_url(finance_settings['url'])
            raw_data = finance_service.get_sheet_data(sheet_id, finance_settings['sheet_name'])
            parsed_data = finance_service.parse_financial_data(raw_data)
            
            # Get previous data count for comparison
            previous_count = db.get_user_data_count(user_id)
            current_count = len(parsed_data)
            new_operations = current_count - previous_count
            
            # Update data count in database
            db.update_user_data_count(user_id, current_count)
            
            # Format success message
            current_time = datetime.now().strftime('%d %b, %H:%M')
            message = f"‚úÖ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {current_count}\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {new_operations}\n"
            message += f"‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {current_time}\n\n"
            
            if new_operations > 0:
                message += f"üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_operations} –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!\n\n"
            else:
                message += "üìã –ù–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            
            message += "üí° *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n"
            message += "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
            message += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
            message += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã"
            
            keyboard = [
                [InlineKeyboardButton("üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data='finance_menu')],
                [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data='finance_auto_refresh')],
                [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data='finance_show_changes')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error refreshing data for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(
                query,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='finance_refresh')],
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ])
            )
        
        return 'refresh_data'
