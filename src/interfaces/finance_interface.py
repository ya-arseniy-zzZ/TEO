"""
Finance interface for Teo bot
Provides user interface for Google Sheets financial data analysis
"""
import logging
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from src.services.finance_service import finance_service
from src.database.database import DatabaseManager

logger = logging.getLogger(__name__)
db = DatabaseManager()


class FinanceInterface:
    """Handles finance-related bot interactions"""
    
    @staticmethod
    async def _edit_message_safely(query, text, reply_markup=None):
        """Safely edit message, handling both text and photo messages"""
        if query.message.photo:
            await query.edit_message_caption(
                caption=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            await FinanceInterface._edit_message_safely(query, 
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    
    @staticmethod
    def create_finance_menu() -> InlineKeyboardMarkup:
        """Create main finance menu"""
        keyboard = [
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü", callback_data='finance_month')],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='finance_week')],
            [InlineKeyboardButton("üìÖ –ê–Ω–∞–ª–∏–∑ –∑–∞ –¥–µ–Ω—å", callback_data='finance_day')],
            [InlineKeyboardButton("üí∞ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑", callback_data='finance_all')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã", callback_data='finance_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_settings_menu() -> InlineKeyboardMarkup:
        """Create finance settings menu"""
        keyboard = [
            [InlineKeyboardButton("üìù –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É", callback_data='finance_set_url')],
            [InlineKeyboardButton("üîó –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É", callback_data='finance_show_url')],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_clear_settings')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def create_period_menu() -> InlineKeyboardMarkup:
        """Create period selection menu"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data='finance_period_day')],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data='finance_period_week')],
            [InlineKeyboardButton("üìà –ú–µ—Å—è—Ü", callback_data='finance_period_month')],
            [InlineKeyboardButton("üìä –ì–æ–¥", callback_data='finance_period_year')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def handle_finance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle finance menu selection"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Check if user has configured Google Sheets
        sheet_url = db.get_finance_settings(user_id)
        if not sheet_url:
            await FinanceInterface._edit_message_safely(
                query,
                "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑*\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
                ])
            )
            return 'finance_menu'
        
        await FinanceInterface._edit_message_safely(
            query,
            "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤:",
            reply_markup=FinanceInterface.create_finance_menu()
        )
        return 'finance_menu'
    
    @staticmethod
    async def handle_finance_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle finance settings menu"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_url = db.get_finance_settings(user_id)
        
        if sheet_url:
            status_text = "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else:
            status_text = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        await FinanceInterface._edit_message_safely(
            query,
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=FinanceInterface.create_settings_menu()
        )
        return 'finance_settings'
    
    @staticmethod
    async def handle_set_sheet_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle setting Google Sheets URL"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Set user state to wait for URL
        context.user_data['waiting_for'] = 'finance_sheet_url'
        
        # Check if the current message has media and handle accordingly
        if query.message.photo:
            await query.edit_message_caption(
                caption="üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É.\n\n"
                "–§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏:\n"
                "`https://docs.google.com/spreadsheets/d/SHEET_ID/edit`\n\n"
                "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_settings')]
                ]),
                parse_mode='Markdown'
            )
        else:
                    await FinanceInterface._edit_message_safely(
            query,
            "üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É.\n\n"
            "–§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏:\n"
            "`https://docs.google.com/spreadsheets/d/SHEET_ID/edit`\n\n"
            "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='finance_settings')]
            ])
        )
        return 'waiting_for_url'
    
    @staticmethod
    async def handle_sheet_url_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle user input of Google Sheets URL"""
        user_id = update.message.from_user.id
        url = update.message.text.strip()
        
        # Extract sheet ID
        sheet_id = finance_service.extract_sheet_id_from_url(url)
        if not sheet_id:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:\n"
                "`https://docs.google.com/spreadsheets/d/SHEET_ID/edit`",
                parse_mode='Markdown'
            )
            return 'waiting_for_url'
        
        # Test connection to sheet
        raw_data = finance_service.get_sheet_data(sheet_id)
        if not raw_data:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞\n"
                "‚Ä¢ –í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
            )
            return 'waiting_for_url'
        
        # Parse data to check if it's financial data
        parsed_data = finance_service.parse_financial_data(raw_data)
        if not parsed_data:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫–∏:\n"
                "‚Ä¢ –î–∞—Ç–∞\n"
                "‚Ä¢ –°—É–º–º–∞\n"
                "‚Ä¢ –¢–∏–ø (–î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥)\n"
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            )
            return 'waiting_for_url'
        
        # Save settings
        success = db.update_finance_settings(user_id, url)
        if success:
            await update.message.reply_text(
                f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(parsed_data)}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí∞ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data='finance_menu')]
                ])
            )
            # Clear waiting state
            context.user_data.pop('waiting_for', None)
            return 'finance_menu'
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return 'waiting_for_url'
    
    @staticmethod
    async def handle_show_sheet_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle showing current sheet URL"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_url = db.get_finance_settings(user_id)
        
        # Check if the current message has media and handle accordingly
        if query.message.photo:
            if sheet_url:
                await query.edit_message_caption(
                    caption=f"üîó *–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞*\n\n"
                    f"`{sheet_url}`\n\n"
                    f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É'",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='finance_set_url')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_caption(
                    caption="‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data='finance_set_url')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ])
                )
        else:
            if sheet_url:
                await FinanceInterface._edit_message_safely(query, 
                    f"üîó *–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞*\n\n"
                    f"`{sheet_url}`\n\n"
                    f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É'",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='finance_set_url')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await FinanceInterface._edit_message_safely(query, 
                    "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ '–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data='finance_set_url')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                    ])
                )
        
        return 'finance_settings'
    
    @staticmethod
    async def handle_clear_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle clearing finance settings"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        success = db.update_finance_settings(user_id, None)
        
        if success:
            await FinanceInterface._edit_message_safely(query, 
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='finance_set_url')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        else:
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_settings')]
                ])
            )
        
        return 'finance_settings'
    
    @staticmethod
    async def handle_finance_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str) -> str:
        """Handle finance analysis for specific period"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_url = db.get_finance_settings(user_id)
        
        if not sheet_url:
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
            return 'finance_menu'
        
        # Show loading message
        await FinanceInterface._edit_message_safely(query, 
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ])
        )
        
        try:
            # Get data from sheet
            sheet_id = finance_service.extract_sheet_id_from_url(sheet_url)
            raw_data = finance_service.get_sheet_data(sheet_id)
            
            if not raw_data:
                await FinanceInterface._edit_message_safely(query, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                    ])
                )
                return 'finance_menu'
            
            # Parse and analyze data
            parsed_data = finance_service.parse_financial_data(raw_data)
            analysis = finance_service.analyze_finances(parsed_data, period)
            
            # Format response
            period_names = {
                'day': '–¥–µ–Ω—å',
                'week': '–Ω–µ–¥–µ–ª—é', 
                'month': '–º–µ—Å—è—Ü',
                'year': '–≥–æ–¥',
                'all': '–≤—Å–µ –≤—Ä–µ–º—è'
            }
            
            period_name = period_names.get(period, period)
            
            message = f"üí∞ *–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_name}*\n\n"
            message += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            message += f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {analysis['total_income']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {analysis['total_expenses']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {analysis['balance']:,.0f} ‚ÇΩ\n"
            message += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {analysis['transactions_count']}\n\n"
            
            if analysis['expense_categories']:
                message += "üìâ *–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for i, (category, amount) in enumerate(list(analysis['expense_categories'].items())[:5], 1):
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
                message += "\n"
            
            if analysis['income_categories']:
                message += "üìà *–¢–æ–ø –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for i, (category, amount) in enumerate(list(analysis['income_categories'].items())[:5], 1):
                    message += f"{i}. {category}: {amount:,.0f} ‚ÇΩ\n"
            
            keyboard = [
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f'finance_detailed_{period}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(query, 
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error analyzing finances for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='finance_settings')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'finance_menu'
    
    @staticmethod
    async def handle_detailed_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str) -> str:
        """Handle detailed finance analysis"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        sheet_url = db.get_finance_settings(user_id)
        
        try:
            sheet_id = finance_service.extract_sheet_id_from_url(sheet_url)
            raw_data = finance_service.get_sheet_data(sheet_id)
            parsed_data = finance_service.parse_financial_data(raw_data)
            analysis = finance_service.analyze_finances(parsed_data, period)
            
            period_names = {
                'day': '–¥–µ–Ω—å',
                'week': '–Ω–µ–¥–µ–ª—é', 
                'month': '–º–µ—Å—è—Ü',
                'year': '–≥–æ–¥',
                'all': '–≤—Å–µ –≤—Ä–µ–º—è'
            }
            
            period_name = period_names.get(period, period)
            
            message = f"üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞ {period_name}*\n\n"
            
            if analysis['expense_categories']:
                message += "üìâ *–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, amount in analysis['expense_categories'].items():
                    percentage = (amount / analysis['total_expenses'] * 100) if analysis['total_expenses'] > 0 else 0
                    message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
                message += "\n"
            
            if analysis['income_categories']:
                message += "üìà *–í—Å–µ –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
                for category, amount in analysis['income_categories'].items():
                    percentage = (amount / analysis['total_income'] * 100) if analysis['total_income'] > 0 else 0
                    message += f"‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É", callback_data=f'finance_{period}')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='finance_menu')]
            ]
            
            await FinanceInterface._edit_message_safely(query, 
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in detailed analysis for user {user_id}: {e}")
            await FinanceInterface._edit_message_safely(query, 
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='finance_menu')]
                ])
            )
        
        return 'finance_menu'
