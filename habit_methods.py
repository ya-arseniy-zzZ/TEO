"""
Additional habit tracking methods for Teo bot
These methods are separated to keep the main bot file manageable
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from habit_tracker import HabitTracker
from habit_interface import HabitInterface

# Import the global habit_tracker instance from teo_bot
# We'll pass it as parameter instead to avoid circular imports


async def show_habit_creation(query, user_id: int, habit_creation_data, user_states, habit_tracker):
    """Show habit creation options"""
    message = """‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏**

–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!

–í—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—é:"""
    
    keyboard, has_next = HabitInterface.create_habit_suggestions_keyboard(0)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def show_habit_suggestions(query, user_id: int, page: int):
    """Show habit suggestions with pagination"""
    message = f"""üí° **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏** (—Å—Ç—Ä. {page + 1})

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ—é:"""
    
    keyboard, has_next = HabitInterface.create_habit_suggestions_keyboard(page)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def start_habit_creation_with_name(query, user_id: int, habit_name: str, habit_creation_data):
    """Start habit creation with a pre-selected name"""
    habit_creation_data[user_id] = {
        'name': habit_name,
        'description': '',
        'reminder_time': '09:00',
        'reminder_days': ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    }
    
    message = f"""‚úèÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏: {habit_name}**

–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.

–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":"""
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_description')],
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–∏–≤—ã—á–µ–∫", callback_data='create_habit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Set state for description input
    from teo_bot import user_states
    user_states[user_id] = 'waiting_habit_description'
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def show_custom_habit_input(query, user_id: int, user_states):
    """Show custom habit input instructions"""
    user_states[user_id] = 'waiting_habit_name'
    
    message = """‚úèÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–∏–≤—ã—á–∫–∏**

–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã`
‚Ä¢ `–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É`
‚Ä¢ `–ü–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü`
‚Ä¢ `–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å 5 –º–∏–Ω—É—Ç`

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—ã—á–∫–∏."""
    
    keyboard = [
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–∏–≤—ã—á–µ–∫", callback_data='create_habit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def process_custom_habit_name(update, user_id: int, habit_name: str, habit_creation_data, user_states):
    """Process custom habit name input"""
    user_states.pop(user_id, None)
    
    habit_creation_data[user_id] = {
        'name': habit_name,
        'description': '',
        'reminder_time': '09:00',
        'reminder_days': ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    }
    
    message = f"""‚úèÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏: {habit_name}**

–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–µ?

–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":"""
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_description')],
        [InlineKeyboardButton("üîô –ö —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∏", callback_data='create_habit')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user_states[user_id] = 'waiting_habit_description'
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def process_habit_description(update, user_id: int, description: str, habit_creation_data, user_states):
    """Process habit description input"""
    user_states.pop(user_id, None)
    
    if user_id in habit_creation_data:
        habit_creation_data[user_id]['description'] = description
    
    await show_habit_time_selection(update, user_id, 0, habit_creation_data, is_message=True)


async def show_habit_time_selection(update_or_query, user_id: int, page: int, habit_creation_data, is_message=False):
    """Show time selection for habit"""
    habit_data = habit_creation_data.get(user_id, {})
    habit_name = habit_data.get('name', '–ø—Ä–∏–≤—ã—á–∫–∞')
    
    message = f"""‚è∞ **–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è "{habit_name}"**

–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"""
    
    keyboard, has_next = HabitInterface.create_time_selection_keyboard(page)
    
    if is_message:
        await update_or_query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update_or_query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def set_habit_time(query, user_id: int, time_str: str, habit_creation_data):
    """Set habit reminder time"""
    if user_id in habit_creation_data:
        habit_creation_data[user_id]['reminder_time'] = time_str
    
    await show_days_selection(query, user_id, habit_creation_data)


async def show_days_selection(query, user_id: int, habit_creation_data):
    """Show days selection for habit"""
    habit_data = habit_creation_data.get(user_id, {})
    habit_name = habit_data.get('name', '–ø—Ä–∏–≤—ã—á–∫–∞')
    selected_days = habit_data.get('reminder_days', [])
    
    message = f"""üìÖ **–î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è "{habit_name}"**

–í—ã–±–µ—Ä–∏ –¥–Ω–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:

–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: {len(selected_days)}/7 –¥–Ω–µ–π"""
    
    keyboard = HabitInterface.create_days_selection_keyboard(selected_days)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def toggle_habit_day(query, user_id: int, day: str, habit_creation_data):
    """Toggle a day for habit reminders"""
    if user_id not in habit_creation_data:
        return
    
    current_days = habit_creation_data[user_id].get('reminder_days', [])
    
    if day in current_days:
        current_days.remove(day)
    else:
        current_days.append(day)
    
    habit_creation_data[user_id]['reminder_days'] = current_days
    
    # Refresh the days selection
    await show_days_selection(query, user_id, habit_creation_data)


async def select_weekdays(query, user_id: int, habit_creation_data):
    """Select weekdays for habit"""
    if user_id not in habit_creation_data:
        return
    
    weekdays = ["monday", "tuesday", "wednesday", "thursday", "friday"]
    habit_creation_data[user_id]['reminder_days'] = weekdays
    
    await show_days_selection(query, user_id, habit_creation_data)


async def select_all_days(query, user_id: int, habit_creation_data):
    """Select all days for habit"""
    if user_id not in habit_creation_data:
        return
    
    all_days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    habit_creation_data[user_id]['reminder_days'] = all_days
    
    await show_days_selection(query, user_id, habit_creation_data)


async def finalize_habit_creation(query, user_id: int, habit_creation_data, db):
    """Create the habit with collected data"""
    habit_data = habit_creation_data.get(user_id)
    
    if not habit_data:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
            ])
        )
        return
    
    # Generate habit ID
    import uuid
    habit_id = str(uuid.uuid4())[:8]
    
    # Get user's timezone settings
    weather_settings = db.get_weather_settings(user_id)
    user_timezone = weather_settings.get('timezone', 'Europe/Moscow') if weather_settings else 'Europe/Moscow'
    
    # Create the habit in database with timezone
    success = db.create_habit(
        habit_id=habit_id,
        user_id=user_id,
        name=habit_data['name'],
        description=habit_data.get('description', ''),
        reminder_time=habit_data.get('reminder_time', '09:00'),
        reminder_days=habit_data.get('reminder_days', []),
        timezone=user_timezone
    )
    
    # Clear creation data
    habit_creation_data.pop(user_id, None)
    
    message = f"""üéâ **–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**

‚úÖ **{habit_data['name']}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫!

‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {habit_data.get('reminder_time', '09:00')}
üìÖ –î–Ω–∏: {len(habit_data.get('reminder_days', []))}/7

–ù–∞—á–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üí™"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data='view_habits')],
        [InlineKeyboardButton("üéØ –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def show_habit_management(query, user_id: int, page: int, db):
    """Show habit management interface"""
    habits = db.get_user_habits(user_id)
    
    if not habits:
        message = """‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏**

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data='create_habit')],
            [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        total_pages = HabitInterface.get_page_count(len(habits))
        message = f"""‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏** (—Å—Ç—Ä. {page + 1}/{total_pages})

–í—ã–±–µ—Ä–∏ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:"""
        
        keyboard, has_next = HabitInterface.create_management_keyboard(habits, page)
        reply_markup = keyboard
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def confirm_delete_habit(query, user_id: int, habit_id: str, db):
    """Show delete confirmation"""
    habit = db.get_habit(habit_id)
    
    if not habit or habit['user_id'] != user_id:
        await query.edit_message_text(
            "‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
            ])
        )
        return
    
    message = f"""üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**

–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:
**{habit['name']}**?

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."""
    
    keyboard = HabitInterface.create_confirmation_keyboard('delete', habit_id)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def delete_habit(query, user_id: int, habit_id: str, db):
    """Delete a habit"""
    habit = db.get_habit(habit_id)
    
    if habit and habit['user_id'] == user_id:
        habit_name = habit['name']
        success = db.delete_habit(habit_id)
        
        if success:
            message = f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ **{habit_name}** —É–¥–∞–ª–µ–Ω–∞."
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É."
    else:
        message = "‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data='view_habits')],
        [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def edit_habit(query, user_id: int, habit_id: str):
    """Edit habit (placeholder for now)"""
    message = """‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**

–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.

–ü–æ–∫–∞ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."""
    
    keyboard = [
        [InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_habit_{habit_id}')],
        [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f'habit_details_{habit_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def show_habit_time_selection(query, user_id: int, page: int, habit_creation_data):
    """Show habit time selection with pagination"""
    message = f"""‚è∞ **–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** (—Å—Ç—Ä. {page + 1})

–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–µ:"""
    
    keyboard, has_next = HabitInterface.create_habit_time_keyboard(page)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def set_habit_time(query, user_id: int, time_str: str, habit_creation_data):
    """Set habit reminder time"""
    if user_id in habit_creation_data:
        habit_creation_data[user_id]['reminder_time'] = time_str
        
        message = f"""‚úÖ **–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}**

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:"""
        
        keyboard = HabitInterface.create_days_selection_keyboard()
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        # If no habit creation data, go back to habit creation
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
            ])
        )


async def show_custom_habit_time_input(query, user_id: int, habit_creation_data):
    """Show custom habit time input instructions"""
    from teo_bot import user_states
    user_states[user_id] = 'waiting_habit_time_input'
    
    message = """‚úèÔ∏è **–í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏**

–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–µ.

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `07:30`
‚Ä¢ `08:00`
‚Ä¢ `21:15`

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º."""
    
    keyboard = HabitInterface.create_custom_habit_time_keyboard()
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')


async def process_custom_habit_time(update, user_id: int, time_str: str, habit_creation_data, user_states):
    """Process custom habit time input"""
    user_states.pop(user_id, None)
    
    try:
        from datetime import datetime
        datetime.strptime(time_str, '%H:%M')  # Validate time format
        
        if user_id in habit_creation_data:
            habit_creation_data[user_id]['reminder_time'] = time_str
            
            message = f"""‚úÖ **–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}**

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:"""
            
            keyboard = HabitInterface.create_days_selection_keyboard()
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º", callback_data='habits_menu')]
                ])
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data='habit_time_page_0')]
            ])
        )
