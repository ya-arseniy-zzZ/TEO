#!/usr/bin/env python3
"""
Simple Test Single Message Bot
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from src.utils.config import BOT_TOKEN
from src.database.database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SimpleTestBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = DatabaseManager()
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text(
            "üß™ **–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç**\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–¥–Ω–æ—Å–æ–æ–±—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üå§ –¢–µ—Å—Ç –ø–æ–≥–æ–¥—ã", callback_data='test_weather')],
                [InlineKeyboardButton("üí∞ –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data='test_finance')],
                [InlineKeyboardButton("üìù –¢–µ—Å—Ç –≤–≤–æ–¥–∞", callback_data='test_input')]
            ]),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.db.save_user_main_message(user_id, message.message_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
        await update.message.delete()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = self.db.get_user_state(user_id)
        
        if current_state == 'waiting_for_test_input':
            await self.handle_test_input(update, context, message_text)
        else:
            await self.show_help(update, context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.delete()
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        main_message_id = self.db.get_user_main_message_id(user_id)
        
        if not main_message_id:
            await self.handle_start(update, context)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
        if query.data == 'test_weather':
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="üå§ **–¢–µ—Å—Ç –ø–æ–≥–æ–¥—ã**\n\n‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]),
                parse_mode='Markdown'
            )
        
        elif query.data == 'test_finance':
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="üí∞ **–¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤**\n\n‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]),
                parse_mode='Markdown'
            )
        
        elif query.data == 'test_input':
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            self.db.set_user_state(user_id, 'waiting_for_test_input')
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="üìù **–¢–µ—Å—Ç –≤–≤–æ–¥–∞**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é –∏ —É–¥–∞–ª—é!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='back')]
                ]),
                parse_mode='Markdown'
            )
        
        elif query.data == 'back':
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="üß™ **–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç**\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–¥–Ω–æ—Å–æ–æ–±—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üå§ –¢–µ—Å—Ç –ø–æ–≥–æ–¥—ã", callback_data='test_weather')],
                    [InlineKeyboardButton("üí∞ –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data='test_finance')],
                    [InlineKeyboardButton("üìù –¢–µ—Å—Ç –≤–≤–æ–¥–∞", callback_data='test_input')]
                ]),
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.db.clear_user_state(user_id)
    
    async def handle_test_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, input_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_id = update.effective_user.id
        main_message_id = self.db.get_user_main_message_id(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=main_message_id,
            text=f"‚úÖ **–¢–µ—Å—Ç –≤–≤–æ–¥–∞ —É—Å–ø–µ—à–µ–Ω!**\n\n–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: **{input_text}**\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ï—â–µ —Ä–∞–∑", callback_data='test_input')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.clear_user_state(user_id)
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        user_id = update.effective_user.id
        main_message_id = self.db.get_user_main_message_id(user_id)
        
        if main_message_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]),
                parse_mode='Markdown'
            )
        else:
            await self.handle_start(update, context)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    print("üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –±–æ—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = SimpleTestBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.handle_start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())


