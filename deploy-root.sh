#!/bin/bash

# Deploy script for root user
# Usage: ./deploy-root.sh [SERVER_IP]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

print_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Check if IP address is provided
if [ $# -eq 0 ]; then
    print_error "–£–∫–∞–∂–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [IP-–ê–î–†–ï–°-–°–ï–†–í–ï–†–ê]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã –¥–µ—à–µ–≤—ã—Ö VPS:"
    echo "  Timeweb: –æ—Ç 150‚ÇΩ/–º–µ—Å—è—Ü"
    echo "  Beget: –æ—Ç 200‚ÇΩ/–º–µ—Å—è—Ü"
    echo "  Reg.ru: –æ—Ç 180‚ÇΩ/–º–µ—Å—è—Ü"
    exit 1
fi

SERVER_IP=$1
REMOTE_DIR="/root/teo-bot"

print_status "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π Teo Bot –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $SERVER_IP"
print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."

# Test SSH connection
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes root@$SERVER_IP "echo 'SSH connection test'" 2>/dev/null; then
    print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_IP"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
    echo "1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    echo "2. SSH –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22"
    echo "3. SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    echo ""
    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é:"
    echo "ssh root@$SERVER_IP"
    exit 1
fi

print_status "SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!"

# Create backup
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

print_status "–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é..."

# Backup current files
if ssh root@$SERVER_IP "[ -d $REMOTE_DIR ]"; then
    ssh root@$SERVER_IP "cd $REMOTE_DIR && tar -czf /tmp/teo_bot_backup_$(date +%Y%m%d_%H%M%S).tar.gz ." || true
    scp root@$SERVER_IP:/tmp/teo_bot_backup_*.tar.gz "$BACKUP_DIR/" || true
    print_status "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ $BACKUP_DIR"
else
    print_warning "–£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
fi

# Stop existing bot
print_status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞..."
ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose down" || true
ssh root@$SERVER_IP "systemctl stop teo-bot.service" || true
ssh root@$SERVER_IP "systemctl disable teo-bot.service" || true

# Kill any remaining Python processes
print_status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python..."
ssh root@$SERVER_IP "pkill -f 'python.*teo' || true"
ssh root@$SERVER_IP "pkill -f 'python3.*teo' || true"

# Create remote directory
print_status "–°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é..."
ssh root@$SERVER_IP "mkdir -p $REMOTE_DIR"

# Copy files
print_status "–ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."

# Copy main files
scp -r src/ root@$SERVER_IP:$REMOTE_DIR/
scp -r docs/ root@$SERVER_IP:$REMOTE_DIR/
scp -r assets/ root@$SERVER_IP:$REMOTE_DIR/
scp -r scripts/ root@$SERVER_IP:$REMOTE_DIR/

# Copy configuration files
scp requirements.txt root@$SERVER_IP:$REMOTE_DIR/
scp Dockerfile root@$SERVER_IP:$REMOTE_DIR/
scp docker-compose.yml root@$SERVER_IP:$REMOTE_DIR/
scp README.md root@$SERVER_IP:$REMOTE_DIR/
scp env_example root@$SERVER_IP:$REMOTE_DIR/

# Copy environment file if exists
if [ -f .env ]; then
    scp .env root@$SERVER_IP:$REMOTE_DIR/
    print_status "–§–∞–π–ª .env —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
else
    print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
fi

# Create data directory and copy database if exists
print_status "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
ssh root@$SERVER_IP "mkdir -p $REMOTE_DIR/data"
if [ -f data/teo_bot.db ]; then
    scp data/teo_bot.db root@$SERVER_IP:$REMOTE_DIR/data/
    print_status "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
else
    print_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
fi

# Set permissions
print_status "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞..."
ssh root@$SERVER_IP "chmod +x $REMOTE_DIR/scripts/*.sh"
ssh root@$SERVER_IP "chown -R root:root $REMOTE_DIR"

# Run database migration
print_status "–ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
ssh root@$SERVER_IP "cd $REMOTE_DIR && python3 -c \"from src.database.migration import run_schema_migration; run_schema_migration()\"" || true

# Build and start Docker container
print_status "–°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose build --no-cache"
ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose up -d"

# Wait for container to start
print_status "–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
sleep 10

# Check if container is running
if ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose ps | grep -q 'Up'"; then
    print_status "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
else
    print_error "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
    ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose logs"
    exit 1
fi

# Show logs
print_status "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞..."
ssh root@$SERVER_IP "cd $REMOTE_DIR && docker-compose logs --tail=20"

print_status "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
print_status "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: $SERVER_IP"
print_status "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: ssh root@$SERVER_IP 'cd $REMOTE_DIR && docker-compose logs -f'"
print_status "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ssh root@$SERVER_IP 'cd $REMOTE_DIR && docker-compose down'"


