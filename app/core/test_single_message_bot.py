"""
Test Single Message Bot
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –æ–¥–Ω–æ—Å–æ–æ–±—â–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.error import TelegramError

from app.core.single_message_bot import SingleMessageBot
from app.utils.config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TestSingleMessageBot:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –æ–¥–Ω–æ—Å–æ–æ–±—â–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self):
        self.single_message_bot = SingleMessageBot()
        self.application = None
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.single_message_bot.handle_start))
        self.application.add_handler(CommandHandler("test", self.handle_test_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.single_message_bot.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.single_message_bot.handle_callback))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.run_polling()
    
    async def handle_test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await update.message.reply_text(
            "üß™ **–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º**\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–¥–Ω–æ—Å–æ–æ–±—â–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üå§ –¢–µ—Å—Ç –ø–æ–≥–æ–¥—ã", callback_data='test_weather')],
                [InlineKeyboardButton("üí∞ –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data='test_finance')],
                [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data='test_settings')],
                [InlineKeyboardButton("üìù –¢–µ—Å—Ç –≤–≤–æ–¥–∞", callback_data='test_input')]
            ]),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.single_message_bot.db.save_user_main_message(user_id, message.message_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /test
        await update.message.delete()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        if update and update.effective_user:
            user_id = update.effective_user.id
            main_message_id = self.single_message_bot.db.get_user_main_message_id(user_id)
            
            if main_message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=main_message_id,
                        text="‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='main_menu')]
                        ]),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TestSingleMessageBot()
    await bot.start()


if __name__ == "__main__":
    asyncio.run(main())
